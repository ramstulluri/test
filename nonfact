"use strict";
/*!
 * Mvc.Grid 7.0.0
 *
 * Copyright Â© NonFactors
 *
 * Licensed under the terms of the MIT License
 * https://www.opensource.org/licenses/mit-license.php
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MvcGridGuidFilter = exports.MvcGridDateFilter = exports.MvcGridNumberFilter = exports.MvcGridTextFilter = exports.MvcGridFilter = exports.MvcGridPopup = exports.MvcGridPager = exports.MvcGridColumnFilter = exports.MvcGridColumnSort = exports.MvcGridColumn = exports.MvcGrid = void 0;
var MvcGrid = /** @class */ (function () {
    function MvcGrid(container, options) {
        if (options === void 0) { options = {}; }
        var grid = this;
        var element = grid.findGrid(container);
        if (element.dataset.id) {
            return MvcGrid.instances[parseInt(element.dataset.id)].set(options);
        }
        grid.columns = [];
        grid.element = element;
        grid.loadingDelay = 300;
        grid.loadingTimerId = 0;
        grid.name = element.dataset.name;
        grid.controller = new AbortController();
        grid.isAjax = Boolean(element.dataset.url);
        grid.prefix = grid.name ? grid.name + "-" : "";
        grid.filterMode = (element.dataset.filterMode || "").toLowerCase();
        element.dataset.id = options.id || MvcGrid.instances.length.toString();
        grid.url = element.dataset.url ? new URL(element.dataset.url, location.href) : new URL(location.href);
        grid.url = options.url ? new URL(options.url.toString(), location.href) : grid.url;
        grid.url = options.query ? new URL("?" + options.query, grid.url.href) : grid.url;
        grid.sort = grid.buildSort();
        grid.filters = {
            default: MvcGridFilter,
            date: MvcGridDateFilter,
            guid: MvcGridGuidFilter,
            text: MvcGridTextFilter,
            number: MvcGridNumberFilter
        };
        var headers = element.querySelector(".mvc-grid-headers");
        var rowFilters = element.querySelectorAll(".mvc-grid-row-filters th");
        if (headers) {
            for (var _i = 0, _a = headers.querySelectorAll("th").entries(); _i < _a.length; _i++) {
                var _b = _a[_i], i = _b[0], header = _b[1];
                grid.columns.push(new MvcGridColumn(grid, header, rowFilters[i]));
            }
        }
        var pager = element.querySelector(".mvc-grid-pager");
        if (pager) {
            grid.pager = new MvcGridPager(grid, pager);
        }
        grid.set(options);
        grid.cleanUp();
        grid.bind();
        if (options.id) {
            MvcGrid.instances[parseInt(options.id)] = grid;
        }
        else {
            MvcGrid.instances.push(grid);
        }
        if (!element.children.length) {
            grid.reload();
        }
    }
    MvcGrid.prototype.set = function (options) {
        var grid = this;
        grid.loadingDelay = typeof options.loadingDelay === "undefined" ? grid.loadingDelay : options.loadingDelay;
        grid.url = options.url ? new URL(options.url.toString(), location.href) : grid.url;
        grid.url = options.query ? new URL("?" + options.query, grid.url.href) : grid.url;
        grid.isAjax = typeof options.isAjax === "boolean" ? options.isAjax : grid.isAjax;
        grid.filters = Object.assign(grid.filters, options.filters);
        for (var _i = 0, _a = grid.columns; _i < _a.length; _i++) {
            var column = _a[_i];
            if (column.filter && grid.filters[column.filter.name]) {
                column.filter.instance = new grid.filters[column.filter.name](column);
                column.filter.instance.init();
            }
        }
        return grid;
    };
    MvcGrid.prototype.showConfiguration = function (anchor) {
        MvcGridPopup.showConfiguration(this, anchor);
    };
    MvcGrid.prototype.getConfiguration = function () {
        return {
            name: this.name,
            columns: this.columns.map(function (column) { return ({ name: column.name, hidden: column.isHidden }); })
        };
    };
    MvcGrid.prototype.configure = function (configuration) {
        var _this = this;
        configuration.columns.forEach(function (column, index) {
            var rows = _this.element.querySelectorAll("tr");
            var i = _this.columns.findIndex(function (col) { return col.name.toLowerCase() === column.name.toLowerCase(); });
            if (i >= 0) {
                _this.columns[i].isHidden = column.hidden;
                for (var _i = 0, rows_1 = rows; _i < rows_1.length; _i++) {
                    var tr = rows_1[_i];
                    if (column.hidden) {
                        tr.children[i].classList.add("mvc-grid-hidden");
                    }
                    else {
                        tr.children[i].classList.remove("mvc-grid-hidden");
                    }
                    if (i !== index) {
                        tr.insertBefore(tr.children[i], tr.children[index]);
                    }
                }
                _this.columns.splice(i - (index < i ? 1 : 0), 0, _this.columns.splice(index, 1)[0]);
            }
        });
    };
    MvcGrid.prototype.reload = function () {
        var grid = this;
        grid.element.dispatchEvent(new CustomEvent("reloadstart", {
            detail: { grid: grid },
            bubbles: true
        }));
        if (grid.isAjax) {
            var url = new URL(grid.url.href);
            grid.controller.abort();
            MvcGridPopup.lastActiveElement = null;
            grid.controller = new AbortController();
            url.searchParams.set("_", String(Date.now()));
            if (grid.loadingDelay !== null) {
                var loader_1 = "<td colspan=\"" + grid.columns.length + "\"><div class=\"mvc-grid-loader\"><div class=\"mvc-grid-spinner\"></div></div></td>";
                clearTimeout(grid.loadingTimerId);
                grid.loadingTimerId = setTimeout(function () {
                    for (var _i = 0, _a = grid.element.querySelectorAll("tbody > tr"); _i < _a.length; _i++) {
                        var row = _a[_i];
                        row.innerHTML = loader_1;
                    }
                }, grid.loadingDelay);
            }
            MvcGridPopup.hide();
            fetch(url.href, {
                signal: grid.controller.signal,
                headers: { "X-Requested-With": "XMLHttpRequest" }
            }).then(function (response) {
                if (!response.ok) {
                    throw new Error("Invalid response status: " + response.status);
                }
                return response.text();
            }).then(function (response) {
                var parent = grid.element.parentElement;
                var template = document.createElement("template");
                var i = Array.from(parent.children).indexOf(grid.element);
                template.innerHTML = response.trim();
                if (template.content.firstElementChild.classList.contains("mvc-grid")) {
                    grid.element.outerHTML = response;
                }
                else {
                    throw new Error("Grid partial should only include grid declaration.");
                }
                var newGrid = new MvcGrid(parent.children[i], {
                    loadingDelay: grid.loadingDelay,
                    id: grid.element.dataset.id,
                    filters: grid.filters,
                    isAjax: grid.isAjax,
                    url: grid.url
                });
                newGrid.element.dispatchEvent(new CustomEvent("reloadend", {
                    detail: { grid: newGrid },
                    bubbles: true
                }));
            }).catch(function (reason) {
                if (reason.name === "AbortError") {
                    return Promise.resolve();
                }
                var cancelled = !grid.element.dispatchEvent(new CustomEvent("reloadfail", {
                    detail: { grid: grid, reason: reason },
                    cancelable: true,
                    bubbles: true
                }));
                return cancelled ? Promise.resolve() : Promise.reject(reason);
            });
        }
        else {
            location.href = grid.url.href;
        }
    };
    MvcGrid.prototype.buildSort = function () {
        var map = new Map();
        var definitions = /(^|,)(.*?) (asc|desc)(?=$|,)/g;
        var sort = this.url.searchParams.get(this.prefix + "sort") || "";
        var match = definitions.exec(sort);
        while (match) {
            map.set(match[2], match[3]);
            match = definitions.exec(sort);
        }
        return map;
    };
    MvcGrid.prototype.findGrid = function (element) {
        var grid = element.closest(".mvc-grid");
        if (!grid) {
            throw new Error("Grid can only be created from within mvc-grid structure.");
        }
        return grid;
    };
    MvcGrid.prototype.cleanUp = function () {
        delete this.element.dataset.filterMode;
        delete this.element.dataset.url;
    };
    MvcGrid.prototype.bind = function () {
        var grid = this;
        var _loop_1 = function (row) {
            if (!row.classList.contains("mvc-grid-empty-row")) {
                row.addEventListener("click", function (e) {
                    var data = {};
                    for (var _i = 0, _a = grid.columns.entries(); _i < _a.length; _i++) {
                        var _b = _a[_i], i = _b[0], column = _b[1];
                        if (row.cells.length <= i) {
                            return;
                        }
                        data[column.name] = row.cells[i].innerText;
                    }
                    this.dispatchEvent(new CustomEvent("rowclick", {
                        detail: { grid: grid, data: data, originalEvent: e },
                        bubbles: true
                    }));
                });
            }
        };
        for (var _i = 0, _a = grid.element.querySelectorAll("tbody > tr"); _i < _a.length; _i++) {
            var row = _a[_i];
            _loop_1(row);
        }
    };
    MvcGrid.instances = [];
    MvcGrid.lang = {
        default: {
            "equals": "Equals",
            "not-equals": "Not equals"
        },
        text: {
            "contains": "Contains",
            "equals": "Equals",
            "not-equals": "Not equals",
            "starts-with": "Starts with",
            "ends-with": "Ends with"
        },
        number: {
            "equals": "Equals",
            "not-equals": "Not equals",
            "less-than": "Less than",
            "greater-than": "Greater than",
            "less-than-or-equal": "Less than or equal",
            "greater-than-or-equal": "Greater than or equal"
        },
        date: {
            "equals": "Equals",
            "not-equals": "Not equals",
            "earlier-than": "Earlier than",
            "later-than": "Later than",
            "earlier-than-or-equal": "Earlier than or equal",
            "later-than-or-equal": "Later than or equal"
        },
        guid: {
            "equals": "Equals",
            "not-equals": "Not equals"
        },
        filter: {
            "apply": "&#10003;",
            "remove": "&#10008;"
        },
        operator: {
            "select": "",
            "and": "and",
            "or": "or"
        }
    };
    return MvcGrid;
}());
exports.MvcGrid = MvcGrid;
var MvcGridColumn = /** @class */ (function () {
    function MvcGridColumn(grid, header, rowFilter) {
        var column = this;
        var data = header.dataset;
        column.grid = grid;
        column.header = header;
        column.name = data.name || "";
        column.isHidden = header.classList.contains("mvc-grid-hidden");
        column.filter = data.filter ? new MvcGridColumnFilter(column, rowFilter) : null;
        column.sort = header.classList.contains("sortable") ? new MvcGridColumnSort(column) : null;
        column.cleanUp();
    }
    MvcGridColumn.prototype.cleanUp = function () {
        var data = this.header.dataset;
        delete data.filterDefaultMethod;
        delete data.filterApplied;
        delete data.filterType;
        delete data.filter;
        delete data.sortFirst;
        delete data.sort;
        delete data.name;
    };
    return MvcGridColumn;
}());
exports.MvcGridColumn = MvcGridColumn;
var MvcGridColumnSort = /** @class */ (function () {
    function MvcGridColumnSort(column) {
        var sort = this;
        sort.column = column;
        sort.button = column.header.querySelector(".mvc-grid-sort");
        sort.order = (column.header.dataset.sort || "").toLowerCase();
        sort.first = (column.header.dataset.sortFirst || "asc").toLowerCase();
        sort.bind();
    }
    MvcGridColumnSort.prototype.toggle = function (multi) {
        var sort = this;
        var grid = sort.column.grid;
        var map = sort.column.grid.sort;
        var query = grid.url.searchParams;
        if (sort.order === sort.first) {
            sort.order = sort.order === "asc" ? "desc" : "asc";
        }
        else if (sort.order) {
            sort.order = "";
        }
        else {
            sort.order = sort.first;
        }
        if (!multi) {
            map.clear();
        }
        if (sort.order) {
            map.set(sort.column.name, sort.order);
        }
        else {
            map.delete(sort.column.name);
        }
        var order = Array.from(map).map(function (value) { return value.join(" "); }).join(",");
        query.delete(grid.prefix + "sort");
        if (order) {
            query.set(grid.prefix + "sort", order);
        }
        grid.reload();
    };
    MvcGridColumnSort.prototype.bind = function () {
        var sort = this;
        var column = sort.column;
        column.header.addEventListener("click", function (e) {
            if (!column.filter || column.grid.filterMode !== "header") {
                if (!/mvc-grid-(sort|filter)/.test(e.target.className)) {
                    sort.toggle(e.ctrlKey || e.shiftKey);
                }
            }
        });
        sort.button.addEventListener("click", function (e) {
            sort.toggle(e.ctrlKey || e.shiftKey);
        });
    };
    return MvcGridColumnSort;
}());
exports.MvcGridColumnSort = MvcGridColumnSort;
var MvcGridColumnFilter = /** @class */ (function () {
    function MvcGridColumnFilter(column, rowFilter) {
        var values = [];
        var methods = [];
        var filter = this;
        var data = column.header.dataset;
        var query = column.grid.url.searchParams;
        var name = column.grid.prefix + column.name + "-";
        var options = column.header.querySelector(".mvc-grid-options");
        if (column.grid.filterMode === "row") {
            options = rowFilter.querySelector("select");
        }
        if (options === null || options === void 0 ? void 0 : options.classList.contains("mvc-grid-options")) {
            options.parentElement.removeChild(options);
        }
        for (var _i = 0, _a = query.entries(); _i < _a.length; _i++) {
            var parameter = _a[_i];
            if (parameter[0] !== name + "op" && parameter[0].startsWith(name)) {
                methods.push(parameter[0].substring(name.length));
                values.push(parameter[1]);
            }
        }
        filter.column = column;
        filter.rowFilter = rowFilter;
        filter.name = data.filter || "default";
        filter.isApplied = data.filterApplied === "True";
        filter.defaultMethod = data.filterDefaultMethod || "";
        filter.type = (data.filterType || "single").toLowerCase();
        filter.options = options && options.children.length > 0 ? options : null;
        filter.button = (rowFilter || column.header).querySelector(".mvc-grid-filter");
        filter.inlineInput = rowFilter ? rowFilter.querySelector(".mvc-grid-value") : null;
        filter.first = {
            method: methods[0] || "",
            values: filter.type === "multi" ? values : values.slice(0, 1)
        };
        filter.operator = filter.type === "double" ? query.get(name + "op") || "" : "";
        filter.second = {
            method: filter.type === "double" ? methods[1] || "" : "",
            values: filter.type === "double" ? values.slice(1, 2) : []
        };
        this.bind();
    }
    MvcGridColumnFilter.prototype.apply = function () {
        var _this = this;
        var _a;
        var grid = this.column.grid;
        var query = grid.url.searchParams;
        var prefix = this.column.grid.prefix;
        var order = query.get(prefix + "sort");
        for (var _i = 0, _b = grid.columns; _i < _b.length; _i++) {
            var column = _b[_i];
            for (var _c = 0, _d = __spreadArrays(query.keys()); _c < _d.length; _c++) {
                var key = _d[_c];
                if (key.startsWith(prefix + column.name + "-")) {
                    query.delete(key);
                }
            }
        }
        query.delete(prefix + "sort");
        query.delete(prefix + "page");
        query.delete(prefix + "rows");
        for (var _e = 0, _f = grid.columns.filter(function (col) { return col.filter && (col === _this.column || col.filter.isApplied || col.filter.first.values[0]); }); _e < _f.length; _e++) {
            var column = _f[_e];
            var filter = column.filter;
            query.set(prefix + column.name + "-" + filter.first.method, filter.first.values[0] || "");
            for (var i = 1; filter.type === "multi" && i < filter.first.values.length; i++) {
                query.append(prefix + column.name + "-" + filter.first.method, filter.first.values[i] || "");
            }
            if (grid.filterMode === "excel" && filter.type === "double") {
                query.set(prefix + column.name + "-op", filter.operator || "");
                query.append(prefix + column.name + "-" + filter.second.method, filter.second.values[0] || "");
            }
        }
        if (order) {
            query.set(prefix + "sort", order);
        }
        if ((_a = grid.pager) === null || _a === void 0 ? void 0 : _a.showPageSizes) {
            query.set(prefix + "rows", grid.pager.rowsPerPage.value);
        }
        grid.reload();
    };
    MvcGridColumnFilter.prototype.cancel = function () {
        var filter = this;
        var column = filter.column;
        var grid = filter.column.grid;
        var query = grid.url.searchParams;
        if (filter.isApplied) {
            query.delete(grid.prefix + "page");
            query.delete(grid.prefix + "rows");
            for (var _i = 0, _a = __spreadArrays(query.keys()); _i < _a.length; _i++) {
                var key = _a[_i];
                if (key.startsWith(grid.prefix + column.name + "-")) {
                    query.delete(key);
                }
            }
            grid.reload();
        }
        else {
            filter.first.values = [];
            filter.second.values = [];
            if (column.grid.filterMode !== "excel") {
                filter.inlineInput.value = "";
            }
            MvcGridPopup.hide();
        }
    };
    MvcGridColumnFilter.prototype.bind = function () {
        var filter = this;
        var column = filter.column;
        var mode = column.grid.filterMode;
        filter.button.addEventListener("click", function () {
            MvcGridPopup.show(filter);
        });
        if (filter.options) {
            if (mode === "row" && filter.type !== "multi") {
                filter.inlineInput.addEventListener("change", function () {
                    filter.first.values = [this.value];
                    column.filter.apply();
                });
            }
            else if (mode === "header" || mode === "row") {
                filter.inlineInput.addEventListener("click", function () {
                    if (this.selectionStart === this.selectionEnd) {
                        MvcGridPopup.show(filter);
                    }
                });
            }
        }
        else if (mode !== "excel") {
            filter.inlineInput.addEventListener("input", function () {
                filter.first.values = [this.value];
                filter.instance.validate(this);
            });
            filter.inlineInput.addEventListener("keyup", function (e) {
                if (e.which === 13 && filter.instance.isValid(this.value)) {
                    column.filter.apply();
                }
            });
        }
    };
    return MvcGridColumnFilter;
}());
exports.MvcGridColumnFilter = MvcGridColumnFilter;
var MvcGridPager = /** @class */ (function () {
    function MvcGridPager(grid, element) {
        var pager = this;
        pager.grid = grid;
        pager.element = element;
        pager.totalRows = parseInt(element.dataset.totalRows);
        pager.pages = grid.element.querySelectorAll("[data-page]");
        pager.showPageSizes = element.dataset.showPageSizes === "True";
        pager.rowsPerPage = element.querySelector(".mvc-grid-pager-rows");
        pager.currentPage = pager.pages.length ? parseInt(element.querySelector(".active").dataset.page) : 1;
        pager.cleanUp();
        pager.bind();
    }
    MvcGridPager.prototype.apply = function (page, rows) {
        var grid = this.grid;
        var query = grid.url.searchParams;
        query.delete(grid.prefix + "page");
        query.delete(grid.prefix + "rows");
        query.set(grid.prefix + "page", page);
        if (this.showPageSizes) {
            query.set(grid.prefix + "rows", typeof rows === "string" ? rows : this.rowsPerPage.value);
        }
        grid.reload();
    };
    MvcGridPager.prototype.cleanUp = function () {
        delete this.element.dataset.showPageSizes;
        delete this.element.dataset.totalPages;
        delete this.element.dataset.totalRows;
    };
    MvcGridPager.prototype.bind = function () {
        var pager = this;
        for (var _i = 0, _a = pager.pages; _i < _a.length; _i++) {
            var page = _a[_i];
            page.addEventListener("click", function () {
                pager.apply(this.dataset.page);
            });
        }
        pager.grid.element.querySelectorAll(".mvc-grid-pager-rows").forEach(function (rowsPerPage) {
            rowsPerPage.addEventListener("change", function () {
                var rows = parseInt(this.value);
                if (!isNaN(rows) && rows >= 0) {
                    var totalPages = rows === 0 ? 1 : Math.ceil(pager.totalRows / rows);
                    pager.apply(Math.min(pager.currentPage, totalPages).toString(), rows.toString());
                }
            });
        });
    };
    return MvcGridPager;
}());
exports.MvcGridPager = MvcGridPager;
var MvcGridPopup = /** @class */ (function () {
    function MvcGridPopup() {
    }
    MvcGridPopup.showConfiguration = function (grid, anchor) {
        var popup = this;
        popup.lastActiveElement = document.activeElement;
        popup.element.className = "mvc-grid-popup mvc-grid-configuration";
        popup.element.innerHTML = "<div class=\"popup-arrow\"></div><div class=\"popup-content\"></div>";
        var content = popup.element.querySelector(".popup-content");
        content.appendChild(popup.createDropzone());
        for (var _i = 0, _a = grid.columns; _i < _a.length; _i++) {
            var column = _a[_i];
            content.appendChild(popup.createPreference(column));
            content.appendChild(popup.createDropzone());
        }
        if (grid.columns.length) {
            document.body.appendChild(popup.element);
        }
        popup.reposition(grid, anchor);
        popup.bind();
    };
    MvcGridPopup.show = function (filter) {
        if (!filter.instance) {
            return;
        }
        var popup = this;
        var filterer = filter.instance;
        popup.lastActiveElement = document.activeElement;
        popup.element.className = ("mvc-grid-popup " + filterer.cssClasses).trim();
        popup.element.innerHTML = "<div class=\"popup-arrow\"></div><div class=\"popup-content\">" + filterer.render() + "</div>";
        document.body.appendChild(popup.element);
        popup.bind();
        popup.setValues(filter);
        popup.reposition(filter.column.grid, filter.button);
        filterer.bindOperator();
        filterer.bindMethods();
        filterer.bindValues();
        filterer.bindActions();
        popup.element.querySelector(".mvc-grid-value").focus();
    };
    MvcGridPopup.hide = function (e) {
        var popup = MvcGridPopup;
        var initiator = e && e.target;
        var visible = popup.element.parentNode;
        var outside = !(initiator === null || initiator === void 0 ? void 0 : initiator.closest(".mvc-grid-popup,.mvc-grid-filter"));
        if (visible && outside) {
            document.body.removeChild(popup.element);
            if (popup.lastActiveElement) {
                popup.lastActiveElement.focus();
                popup.lastActiveElement = null;
            }
        }
    };
    MvcGridPopup.setValues = function (filter) {
        var popup = this;
        popup.setValue(".mvc-grid-operator", [filter.operator]);
        popup.setValue(".mvc-grid-value[data-filter=\"first\"]", filter.first.values);
        popup.setValue(".mvc-grid-value[data-filter=\"second\"]", filter.second.values);
        popup.setValue(".mvc-grid-method[data-filter=\"first\"]", [filter.first.method]);
        popup.setValue(".mvc-grid-method[data-filter=\"second\"]", [filter.second.method]);
    };
    MvcGridPopup.setValue = function (selector, values) {
        var input = this.element.querySelector(selector);
        if (input) {
            if (input.tagName === "SELECT" && input.multiple) {
                for (var _i = 0, _a = Array.from(input.options); _i < _a.length; _i++) {
                    var option = _a[_i];
                    option.selected = values.indexOf(option.value) >= 0;
                }
            }
            else {
                input.value = values[0] || "";
            }
        }
    };
    MvcGridPopup.createPreference = function (column) {
        var _a;
        var popup = this;
        var name = document.createElement("span");
        var checkbox = document.createElement("input");
        var preference = document.createElement("label");
        checkbox.type = "checkbox";
        preference.draggable = true;
        preference.className = "mvc-grid-column";
        if ((_a = column.filter) === null || _a === void 0 ? void 0 : _a.inlineInput) {
            name.innerText = column.filter.inlineInput.placeholder;
        }
        else {
            name.innerText = column.header.innerText.trim();
        }
        checkbox.checked = !column.isHidden;
        checkbox.addEventListener("change", function () {
            var i = column.grid.columns.indexOf(column);
            for (var _i = 0, _a = column.grid.element.querySelectorAll("tr"); _i < _a.length; _i++) {
                var tr = _a[_i];
                if (checkbox.checked) {
                    tr.children[i].classList.remove("mvc-grid-hidden");
                }
                else {
                    tr.children[i].classList.add("mvc-grid-hidden");
                }
            }
            column.isHidden = !checkbox.checked;
            column.grid.element.dispatchEvent(new CustomEvent("gridconfigure", {
                detail: { grid: column.grid },
                bubbles: true
            }));
        });
        preference.addEventListener("dragstart", function () {
            popup.draggedColumn = column;
            popup.draggedElement = preference;
            preference.style.opacity = "0.4";
            preference.parentElement.classList.add("mvc-grid-dragging");
        });
        preference.addEventListener("dragend", function () {
            popup.draggedColumn = null;
            popup.draggedElement = null;
            preference.style.opacity = "";
            preference.parentElement.classList.remove("mvc-grid-dragging");
        });
        preference.appendChild(checkbox);
        preference.appendChild(name);
        return preference;
    };
    MvcGridPopup.createDropzone = function () {
        var _this = this;
        var dropzone = document.createElement("div");
        dropzone.className = "mvc-grid-dropzone";
        dropzone.addEventListener("dragenter", function () {
            dropzone.classList.add("hover");
        });
        dropzone.addEventListener("dragover", function (e) {
            e.preventDefault();
        });
        dropzone.addEventListener("dragleave", function () {
            dropzone.classList.remove("hover");
        });
        dropzone.addEventListener("drop", function () {
            var popup = _this;
            var dragged = popup.draggedElement;
            var grid = popup.draggedColumn.grid;
            if (dropzone !== dragged.previousElementSibling && dropzone !== dragged.nextElementSibling) {
                var index = Array.from(popup.element.querySelectorAll(".mvc-grid-dropzone")).indexOf(dropzone);
                var i = grid.columns.indexOf(popup.draggedColumn);
                dropzone.parentElement.insertBefore(dragged.previousElementSibling, dropzone);
                dropzone.parentElement.insertBefore(dragged, dropzone);
                for (var _i = 0, _a = grid.element.querySelectorAll("tr"); _i < _a.length; _i++) {
                    var tr = _a[_i];
                    tr.insertBefore(tr.children[i], tr.children[index]);
                }
                grid.columns.splice(index - (i < index ? 1 : 0), 0, grid.columns.splice(i, 1)[0]);
                grid.element.dispatchEvent(new CustomEvent("gridconfigure", {
                    detail: { grid: grid },
                    bubbles: true
                }));
            }
            dropzone.classList.remove("hover");
        });
        return dropzone;
    };
    MvcGridPopup.reposition = function (grid, anchor) {
        var element = this.element;
        var style = getComputedStyle(element);
        var arrow = element.querySelector(".popup-arrow");
        var _a = (anchor || grid.element).getBoundingClientRect(), top = _a.top, left = _a.left;
        top += window.pageYOffset - parseFloat(style.borderTopWidth);
        left += window.pageXOffset - parseFloat(style.borderLeftWidth);
        if (anchor) {
            left -= parseFloat(style.marginLeft) - anchor.offsetWidth / 2 + 26;
            var arrowLeft = 26 - parseFloat(getComputedStyle(arrow).borderLeftWidth);
            var width = parseFloat(style.marginLeft) + element.offsetWidth + parseFloat(style.marginRight);
            var offset = Math.max(0, left + width - window.pageXOffset - document.documentElement.clientWidth);
            top += anchor.offsetHeight / 3 * 2 + arrow.offsetHeight - parseFloat(style.marginTop);
            arrow.style.left = Math.max(0, arrowLeft + offset) + "px";
            left -= offset;
        }
        element.style.left = Math.max(0, left) + "px";
        element.style.top = Math.max(0, top) + "px";
        arrow.style.display = anchor ? "" : "none";
    };
    MvcGridPopup.bind = function () {
        var popup = this;
        window.addEventListener("mousedown", popup.hide);
        window.addEventListener("touchstart", popup.hide);
    };
    MvcGridPopup.element = document.createElement("div");
    return MvcGridPopup;
}());
exports.MvcGridPopup = MvcGridPopup;
var MvcGridFilter = /** @class */ (function () {
    function MvcGridFilter(column) {
        var filter = this;
        filter.column = column;
        filter.type = column.filter.type;
        filter.mode = column.grid.filterMode;
        filter.methods = ["equals", "not-equals"];
        filter.cssClasses = "mvc-grid-default-filter";
    }
    MvcGridFilter.prototype.init = function () {
        var filter = this;
        var column = filter.column;
        var columnFilter = column.filter;
        if (!columnFilter.options && filter.mode !== "excel") {
            filter.validate(columnFilter.inlineInput);
        }
        if (!columnFilter.first.method) {
            columnFilter.first.method = columnFilter.defaultMethod;
        }
        if (!columnFilter.second.method) {
            columnFilter.second.method = columnFilter.defaultMethod;
        }
        if (filter.methods.indexOf(columnFilter.first.method) < 0) {
            columnFilter.first.method = filter.methods[0];
        }
        if (filter.methods.indexOf(columnFilter.second.method) < 0) {
            columnFilter.second.method = filter.methods[0];
        }
    };
    MvcGridFilter.prototype.isValid = function (value) {
        return !value || true;
    };
    MvcGridFilter.prototype.validate = function (input) {
        if (this.isValid(input.value)) {
            input.classList.remove("invalid");
        }
        else {
            input.classList.add("invalid");
        }
    };
    MvcGridFilter.prototype.render = function () {
        var filter = this;
        return "<div class=\"popup-filter\">\n                    " + filter.renderFilter("first") + "\n                </div>\n                " + (filter.mode === "excel" && filter.type === "double"
            ? filter.renderOperator() + "\n                    <div class=\"popup-filter\">\n                        " + filter.renderFilter("second") + "\n                    </div>"
            : "") + "\n                " + filter.renderActions();
    };
    MvcGridFilter.prototype.renderFilter = function (name) {
        var filter = this;
        var options = filter.column.filter.options;
        var lang = MvcGrid.lang[filter.column.filter.name] || {};
        var multiple = filter.type === "multi" ? " multiple" : "";
        var methods = filter.methods.map(function (method) { return "<option value=\"" + method + "\">" + (lang[method] || "") + "</option>"; }).join("");
        return "<div class=\"popup-group\">\n                    <select class=\"mvc-grid-method\" data-filter=\"" + name + "\">\n                        " + methods + "\n                    </select>\n                </div>\n                <div class=\"popup-group\">" + (options
            ? "<select class=\"mvc-grid-value\" data-filter=\"" + name + "\"" + multiple + ">\n                          " + options.innerHTML + "\n                       </select>"
            : "<input class=\"mvc-grid-value\" data-filter=\"" + name + "\">") + "\n                </div>";
    };
    MvcGridFilter.prototype.renderOperator = function () {
        var lang = MvcGrid.lang.operator;
        return "<div class=\"popup-operator\">\n                    <div class=\"popup-group\">\n                        <select class=\"mvc-grid-operator\">\n                            <option value=\"\">" + lang.select + "</option>\n                            <option value=\"and\">" + lang.and + "</option>\n                            <option value=\"or\">" + lang.or + "</option>\n                        </select>\n                    </div>\n                </div>";
    };
    MvcGridFilter.prototype.renderActions = function () {
        var lang = MvcGrid.lang.filter;
        return "<div class=\"popup-actions\">\n                    <button type=\"button\" class=\"mvc-grid-apply\" type=\"button\">" + lang.apply + "</button>\n                    <button type=\"button\" class=\"mvc-grid-cancel\" type=\"button\">" + lang.remove + "</button>\n                </div>";
    };
    MvcGridFilter.prototype.bindOperator = function () {
        var filter = this.column.filter;
        var operator = MvcGridPopup.element.querySelector(".mvc-grid-operator");
        if (operator) {
            operator.addEventListener("change", function () {
                filter.operator = this.value;
            });
        }
    };
    MvcGridFilter.prototype.bindMethods = function () {
        var filter = this.column.filter;
        for (var _i = 0, _a = MvcGridPopup.element.querySelectorAll(".mvc-grid-method"); _i < _a.length; _i++) {
            var method = _a[_i];
            method.addEventListener("change", function () {
                filter[this.dataset.filter].method = this.value;
            });
        }
    };
    MvcGridFilter.prototype.bindValues = function () {
        var filter = this;
        var _loop_2 = function (input) {
            if (input.tagName === "SELECT") {
                input.addEventListener("change", function () {
                    var options = Array.from(input.options).filter(function (option) { return option.selected; });
                    filter.column.filter[input.dataset.filter].values = options.map(function (option) { return option.value; });
                    if (filter.mode !== "excel") {
                        var inlineInput = filter.column.filter.inlineInput;
                        if (filter.mode === "header" || filter.type === "multi") {
                            inlineInput.value = options.map(function (option) { return option.text; }).join(", ");
                        }
                        else {
                            inlineInput.value = input.value;
                        }
                        filter.validate(inlineInput);
                    }
                });
            }
            else {
                input.addEventListener("input", function () {
                    filter.column.filter[input.dataset.filter].values = [input.value];
                    if (filter.mode !== "excel") {
                        var inlineInput = filter.column.filter.inlineInput;
                        inlineInput.value = filter.column.filter[input.dataset.filter].values.join(", ");
                        filter.validate(inlineInput);
                    }
                    filter.validate(input);
                });
                input.addEventListener("keyup", function (e) {
                    if (e.which === 13 && filter.isValid(this.value)) {
                        filter.column.filter.apply();
                    }
                });
                filter.validate(input);
            }
        };
        for (var _i = 0, _a = MvcGridPopup.element.querySelectorAll(".mvc-grid-value"); _i < _a.length; _i++) {
            var input = _a[_i];
            _loop_2(input);
        }
    };
    MvcGridFilter.prototype.bindActions = function () {
        var filter = this.column.filter;
        var popup = MvcGridPopup.element;
        popup.querySelector(".mvc-grid-apply").addEventListener("click", filter.apply.bind(filter));
        popup.querySelector(".mvc-grid-cancel").addEventListener("click", filter.cancel.bind(filter));
    };
    return MvcGridFilter;
}());
exports.MvcGridFilter = MvcGridFilter;
var MvcGridTextFilter = /** @class */ (function (_super) {
    __extends(MvcGridTextFilter, _super);
    function MvcGridTextFilter(column) {
        var _this = _super.call(this, column) || this;
        _this.cssClasses = "mvc-grid-text-filter";
        _this.methods = ["contains", "equals", "not-equals", "starts-with", "ends-with"];
        return _this;
    }
    return MvcGridTextFilter;
}(MvcGridFilter));
exports.MvcGridTextFilter = MvcGridTextFilter;
var MvcGridNumberFilter = /** @class */ (function (_super) {
    __extends(MvcGridNumberFilter, _super);
    function MvcGridNumberFilter(column) {
        var _this = _super.call(this, column) || this;
        _this.cssClasses = "mvc-grid-number-filter";
        _this.methods = ["equals", "not-equals", "less-than", "greater-than", "less-than-or-equal", "greater-than-or-equal"];
        return _this;
    }
    MvcGridNumberFilter.prototype.isValid = function (value) {
        return !value || /^(?=.*\d+.*)[-+]?\d*[.,]?\d*$/.test(value);
    };
    return MvcGridNumberFilter;
}(MvcGridFilter));
exports.MvcGridNumberFilter = MvcGridNumberFilter;
var MvcGridDateFilter = /** @class */ (function (_super) {
    __extends(MvcGridDateFilter, _super);
    function MvcGridDateFilter(column) {
        var _this = _super.call(this, column) || this;
        _this.cssClasses = "mvc-grid-date-filter";
        _this.methods = ["equals", "not-equals", "earlier-than", "later-than", "earlier-than-or-equal", "later-than-or-equal"];
        return _this;
    }
    return MvcGridDateFilter;
}(MvcGridFilter));
exports.MvcGridDateFilter = MvcGridDateFilter;
var MvcGridGuidFilter = /** @class */ (function (_super) {
    __extends(MvcGridGuidFilter, _super);
    function MvcGridGuidFilter(column) {
        var _this = _super.call(this, column) || this;
        _this.cssClasses = "mvc-grid-guid-filter";
        return _this;
    }
    MvcGridGuidFilter.prototype.isValid = function (value) {
        return !value || /^[0-9A-F]{8}[-]?([0-9A-F]{4}[-]?){3}[0-9A-F]{12}$/i.test(value);
    };
    return MvcGridGuidFilter;
}(MvcGridFilter));
exports.MvcGridGuidFilter = MvcGridGuidFilter;
